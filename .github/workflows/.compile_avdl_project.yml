name: Auto-Create Build

# Can be called from other repos
on:
  workflow_call:
    inputs:
      # Project name, should be filename-friendly name, no spaces or special characters
      project_name:
        default: avdl_project
        required: true
        type: string
      build_android:
        default: false
        required: false
        type: boolean
      build_android_googleplay:
        default: false
        required: false
        type: boolean
      # include ad-supported builds
      build_ads:
        default: false
        required: false
        type: boolean
      build_quest2:
        default: false
        required: false
        type: boolean
      build_quest2_oculus:
        default: false
        required: false
        type: boolean
      build_linux:
        default: false
        required: false
        type: boolean
      build_windows:
        default: false
        required: false
        type: boolean
      # include steam builds
      build_steam:
        default: false
        required: false
        type: boolean
      # itchio
      itchio_user:
        default: 0
        required: false
        type: string
      itchio_project:
        default: 0
        required: false
        type: string
    secrets:
      # required for android builds
      ANDROID_KEYSTORE:
        required: false
      ANDROID_KEYSTORE_PASSWORD:
        required: false
      # required for ads
      ADMOB_PROJECT_ID:
        required: false
      ADMOB_INTERSTITIAL_AD_ID:
        required: false
      # required for quest 2
      OCULUS_API_LINK:
        required: false
      # required for quest 2 oculus
      OCULUS_PROJECT_ID:
        required: false
      # required for google play
      GOOGLE_PLAY_ID:
        required: false
      AVDL_GOOGLE_PLAY_ACHIEVEMENTS:
        required: false
      # required for itchio release
      BUTLER_API_KEY:
        required: false

env:
  AVDL_BUILD_URL_LINUX: https://github.com/tomtsagk/avdl/releases/download/v0.13.3/avdl_v0.13.3_linux.zip
  AVDL_BUILD_URL_WINDOWS: https://github.com/tomtsagk/avdl/releases/download/v0.13.3/avdl_v0.13.3_windows.zip

jobs:
  # Android
  android:
    if: ${{ (inputs.build_android) || (inputs.build_android_googleplay) }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [android, android_admob, android_googleplay, android_googleplay_admob]
        build_android:
          - ${{ inputs.build_android }}
        build_android_admob:
          - ${{ (inputs.build_android) && (inputs.build_ads) }}
        build_android_googleplay:
          - ${{ inputs.build_android_googleplay }}
        build_android_googleplay_admob:
          - ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: android_admob
            build_android_admob: false
          - build_type: android_googleplay
            build_android_googleplay: false
          - build_type: android_googleplay_admob
            build_android_googleplay_admob: false
    steps:
    - name: init_project
      uses: actions/checkout@v2
    - uses: actions/setup-java@v3
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
        chmod +x avdl_build_linux/bin/avdl
    - name: generate_android_project
      if: ${{ matrix.build_type == 'android' }}
      run: ./avdl_build_linux/bin/avdl --android
    - name: generate_android_project admob
      if: ${{ matrix.build_type == 'android_admob' }}
      run: ./avdl_build_linux/bin/avdl --android --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }}
    - name: generate_android_project googleplay
      if: ${{ matrix.build_type == 'android_googleplay' }}
      run: ./avdl_build_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }}
    - name: generate_android_project googleplay admob
      if: ${{ matrix.build_type == 'android_googleplay_admob' }}
      run: ./avdl_build_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }} --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }}
    - name: compile
      run: |
        cd avdl_build_android
        chmod +x gradlew
        ./gradlew build
    - name: package_builds
      run: |
        mkdir "game_output"
        mkdir "game_output_debug"
        mkdir "game_output_signed"
        mv avdl_build_android/app/build/outputs/apk/release/app-universal-release-unsigned.apk "game_output/game_android.apk"
        mv avdl_build_android/app/build/outputs/apk/debug/app-universal-debug.apk "game_output_debug/game_android_debug.apk"
        cp avdl_build_android/app/build/outputs/native-debug-symbols/release/native-debug-symbols.zip "game_output_signed/native-debug-symbols.zip"
        cp avdl_build_android/app/build/outputs/mapping/release/mapping.txt "game_output_signed/mapping.txt"
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 "game_output/game_android.apk" "game_output_signed/game_android_signed.apk"
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' "game_output_signed/game_android_signed.apk"
        rm keystore
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}"
        path: game_output/game_android.apk
    - name: upload_artifact_signed
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}_signed"
        path: game_output_signed
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}_debug"
        path: game_output_debug/game_android_debug.apk

  # Quest 2
  quest2:
    if: ${{ inputs.build_quest2 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [quest2, quest2_oculus]
        build_quest2:
          - ${{ inputs.build_quest2 }}
        build_quest2_oculus:
          - ${{ inputs.build_quest2_oculus }}
        exclude:
          - build_type: quest2
            build_quest2: false
          - build_type: quest2_oculus
            build_quest2_oculus: false
    steps:
    - name: init_project
      uses: actions/checkout@v2
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
        chmod +x avdl_build_linux/bin/avdl
    - uses: actions/setup-java@v3
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2' }}
      run: ./avdl_build_linux/bin/avdl --quest2
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2_oculus' }}
      run: ./avdl_build_linux/bin/avdl --quest2-oculus ${{ secrets.OCULUS_PROJECT_ID }}
    - name: get_oculus_sdk
      env:
        oculus_api_link: ${{ secrets.OCULUS_API_LINK }}
      run: |
        wget ${oculus_api_link} --quiet
        mkdir avdl_oculus_build
        mv oculus_mobile_sdk.zip avdl_oculus_build
        cd avdl_oculus_build
        unzip oculus_mobile_sdk.zip
        cp ../avdl_build_quest2/ -r avdl_vr_bk/AvdlProject
    - name: compile
      run: |
        cd avdl_oculus_build/avdl_vr_bk/AvdlProject/Projects/Android
        chmod +x ../../../gradlew
        ../../../gradlew assembleDebug
        ../../../gradlew assembleRelease
        mv build/outputs/apk/debug/Android-debug.apk ../../../../../game_quest2_debug.apk
        mv build/outputs/apk/release/Android-release.apk ../../../../../game_quest2.apk
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 ../../../../../game_quest2.apk ../../../../../game_quest2_signed.apk
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' ../../../../../game_quest2_signed.apk
        rm keystore
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_debug
        path: game_quest2_debug.apk
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: game_quest2.apk
    - name: upload_artifact_signed
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_signed
        path: game_quest2_signed.apk

  # Linux
  linux_x86_64:
    if: ${{ inputs.build_linux }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux, linux_steam]
        build_linux:
          - ${{ inputs.build_linux }}
        build_linux_steam:
          - ${{ (inputs.build_linux) && (inputs.build_steam) }}
        exclude:
          - build_type: linux
            build_linux: false
          - build_type: linux_steam
            build_linux_steam: false
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc libgl1-mesa-dev
    - name: init_project
      uses: actions/checkout@v1
    - name: get_avdl
      run: |
        wget $AVDL_BUILD_URL_LINUX -O avdl_build_linux.zip
        unzip avdl_build_linux.zip
    - name: compile_project
      if: ${{ matrix.build_type == 'linux' }}
      run: |
        chmod +x avdl_build_linux/bin/avdl
        ./avdl_build_linux/bin/avdl -i ./avdl_build_linux/dependencies/linux/include -L ./avdl_build_linux/dependencies/linux/lib --standalone
        mkdir avdl_build/dependencies
        cp ./avdl_build_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
        rm avdl_build/dependencies/*steam*
    - name: compile_project steam
      if: ${{ matrix.build_type == 'linux_steam' }}
      run: |
        chmod +x avdl_build_linux/bin/avdl
        ./avdl_build_linux/bin/avdl -i ./avdl_build_linux/dependencies/linux/include -L ./avdl_build_linux/dependencies/linux/lib --standalone --steam
        mkdir avdl_build/dependencies
        cp ./avdl_build_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
    - name: verify
      if: ${{ matrix.build_type == 'linux' }}
      run: |
        cd avdl_build/
        chmod +x bin/${{ inputs.project_name }}
        LD_LIBRARY_PATH=./dependencies/ ./bin/${{ inputs.project_name }} --verify
        cd ../
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_build_${{ matrix.build_type }}
        path: avdl_build

  # Windows
  windows_x86_64:
    if: ${{ inputs.build_windows }}
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [windows, windows_steam]
        build_windows:
          - ${{ inputs.build_windows }}
        build_windows_steam:
          - ${{ (inputs.build_windows) && (inputs.build_steam) }}
        exclude:
          - build_type: windows
            build_windows: false
          - build_type: windows_steam
            build_windows_steam: false
    steps:
    - name: init_project
      uses: actions/checkout@v1
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: get_avdl
      run: |
        C:\msys64\usr\bin\wget.exe -q $Env:AVDL_BUILD_URL_WINDOWS -O avdl_build_windows.zip
    - name: unpack_avdl
      shell: bash
      run: |
        unzip avdl_build_windows.zip
        mv avdl_build_windows AVDL_BUILD
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_project
      if: ${{ matrix.build_type == 'windows' }}
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/share/avdl/cengine/*.cpp AVDL_BUILD/include/*.h cengine
        mkdir build
        AVDL_BUILD/bin/avdl.exe -t
        AVDL_BUILD/bin/avdl.exe --cmake
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="GAME_BUILD"
        cmake --build . --config Release
        cmake --install .
    - name: compile_project steam
      if: ${{ matrix.build_type == 'windows_steam' }}
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/share/avdl/cengine/*.cpp AVDL_BUILD/include/*.h cengine
        mkdir build
        AVDL_BUILD/bin/avdl.exe -t
        AVDL_BUILD/bin/avdl.exe --cmake
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="GAME_BUILD" -DAVDL_STEAM=1
        cmake --build . --config Release
        cmake --install .
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_build_windows
        path: build/GAME_BUILD
    - name: upload_artifact_vs
      if: ${{ false }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_build_windows_vs
        path: build/

  # Itch.io release
  release_itchio:
    if: ${{ always() && !cancelled() && inputs.itchio_user != '' && inputs.itchio_project != '' && github.ref_type == 'tag' }}
    runs-on: ubuntu-20.04
    needs: [linux_x86_64, windows_x86_64, android, quest2]
    steps:
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_linux }}
      with:
        name: ${{ inputs.project_name }}_build_linux
        path: ${{ inputs.project_name }}_build_linux
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_windows }}
      with:
        name: ${{ inputs.project_name }}_build_windows
        path: ${{ inputs.project_name }}_build_windows
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_android }}
      with:
        name: ${{ inputs.project_name }}_android_signed
        path: ${{ inputs.project_name }}_android_signed
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_quest2 }}
      with:
        name: ${{ inputs.project_name }}_quest2_signed
        path: ${{ inputs.project_name }}_quest2_signed
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    - name: get butler
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        ./butler -V
    # Linux
    - name: prepare and upload linux
      if: ${{ inputs.build_linux }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        cd ${{ inputs.project_name }}_build_linux && zip ../${{ inputs.project_name }}_build_linux.zip * -r && cd ..
        ./butler push ${{ inputs.project_name }}_build_linux.zip   ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:linux-x86_64 --userversion ${VERSION:1}
    # Windows
    - name: prepare and upload windows
      if: ${{ inputs.build_windows }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        cd ${{ inputs.project_name }}_build_windows  && zip ../${{ inputs.project_name }}_build_windows.zip * -r && cd ..
        ./butler push ${{ inputs.project_name }}_build_windows.zip ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:windows-x86_64 --userversion ${VERSION:1}
    # Android
    - name: prepare and upload android
      if: ${{ inputs.build_android }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        mv ${{ inputs.project_name }}_android_signed/game_android_signed.apk ${{ inputs.project_name }}_android.apk
        ./butler push ${{ inputs.project_name }}_android.apk ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:android              --userversion ${VERSION:1}
    # Quest 2
    - name: prepare and upload quest2
      if: ${{ inputs.build_android }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        mv ${{ inputs.project_name }}_quest2_signed/game_quest2_signed.apk ${{ inputs.project_name }}_quest2.apk
        ./butler push ${{ inputs.project_name }}_quest2.apk  ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:quest2               --userversion ${VERSION:1}

  # Github release
  create_release:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    runs-on: ubuntu-20.04
    needs: [linux_x86_64, windows_x86_64, android, quest2]
    steps:
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_linux }}
      with:
        name: ${{ inputs.project_name }}_build_linux
        path: ${{ inputs.project_name }}_build_linux
    - uses: actions/download-artifact@v3
      if: ${{ (inputs.build_linux) && (inputs.build_steam) }}
      with:
        name: ${{ inputs.project_name }}_build_linux_steam
        path: ${{ inputs.project_name }}_build_linux_steam
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_windows }}
      with:
        name: ${{ inputs.project_name }}_build_windows
        path: ${{ inputs.project_name }}_build_windows
    - uses: actions/download-artifact@v3
      if: ${{ (inputs.build_windows) && (inputs.build_steam) }}
      with:
        name: ${{ inputs.project_name }}_build_windows_steam
        path: ${{ inputs.project_name }}_build_windows_steam
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_android }}
      with:
        name: ${{ inputs.project_name }}_android
        path: ${{ inputs.project_name }}_android
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_android }}
      with:
        name: ${{ inputs.project_name }}_android_signed
        path: ${{ inputs.project_name }}_android_signed
    - uses: actions/download-artifact@v3
      if: ${{ (inputs.build_android) && (inputs.build_ads) }}
      with:
        name: ${{ inputs.project_name }}_android_admob_signed
        path: ${{ inputs.project_name }}_android_admob_signed
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_android_googleplay }}
      with:
        name: ${{ inputs.project_name }}_android_googleplay
        path: ${{ inputs.project_name }}_android_googleplay
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_android_googleplay }}
      with:
        name: ${{ inputs.project_name }}_android_googleplay_signed
        path: ${{ inputs.project_name }}_android_googleplay_signed
    - uses: actions/download-artifact@v3
      if: ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
      with:
        name: ${{ inputs.project_name }}_android_googleplay_admob_signed
        path: ${{ inputs.project_name }}_android_googleplay_admob_signed
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_quest2 }}
      with:
        name: ${{ inputs.project_name }}_quest2
        path: ${{ inputs.project_name }}_quest2
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_quest2 }}
      with:
        name: ${{ inputs.project_name }}_quest2_signed
        path: ${{ inputs.project_name }}_quest2_signed
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_quest2_oculus }}
      with:
        name: ${{ inputs.project_name }}_quest2_oculus
        path: ${{ inputs.project_name }}_quest2_oculus
    - uses: actions/download-artifact@v3
      if: ${{ inputs.build_quest2_oculus }}
      with:
        name: ${{ inputs.project_name }}_quest2_oculus_signed
        path: ${{ inputs.project_name }}_quest2_oculus_signed
    - name: prepare to zip packages
      run: |
         sudo apt update && sudo apt install -y zip
    - name: zip linux
      if: ${{ inputs.build_linux }}
      run: |
         cd ${{ inputs.project_name }}_build_linux && zip ../${{ inputs.project_name }}_build_linux.zip * -r && cd ..
    - name: zip linux steam
      if: ${{ (inputs.build_linux) && (inputs.build_steam) }}
      run: |
         cd ${{ inputs.project_name }}_build_linux_steam && zip ../${{ inputs.project_name }}_build_linux_steam.zip * -r && cd ..
    - name: zip windows
      if: ${{ inputs.build_windows }}
      run: |
         cd ${{ inputs.project_name }}_build_windows && zip ../${{ inputs.project_name }}_build_windows.zip * -r && cd ..
    - name: zip windows steam
      if: ${{ (inputs.build_windows) && (inputs.build_steam) }}
      run: |
         cd ${{ inputs.project_name }}_build_windows_steam && zip ../${{ inputs.project_name }}_build_windows_steam.zip * -r && cd ..
    - name: zip android
      if: ${{ inputs.build_android }}
      run: |
         cd ${{ inputs.project_name }}_android        && zip ../${{ inputs.project_name }}_build_android.zip            * -r && cd ..
         cd ${{ inputs.project_name }}_android_signed && zip ../${{ inputs.project_name }}_build_android_signed.zip     * -r && cd ..
    - name: zip android admob
      if: ${{ (inputs.build_android) && (inputs.build_ads) }}
      run: |
         cd ${{ inputs.project_name }}_android_admob_signed && zip ../${{ inputs.project_name }}_build_android_admob_signed.zip * -r && cd ..
    - name: zip googleplay
      if: ${{ inputs.build_android_googleplay }}
      run: |
         cd ${{ inputs.project_name }}_android_googleplay         && zip ../${{ inputs.project_name }}_build_android_googleplay.zip * -r && cd ..
         cd ${{ inputs.project_name }}_android_googleplay_signed  && zip ../${{ inputs.project_name }}_build_android_googleplay_signed.zip * -r && cd ..
    - name: zip googleplay admob
      if: ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
      run: |
         cd ${{ inputs.project_name }}_android_googleplay_admob_signed && zip ../${{ inputs.project_name }}_build_android_googleplay_admob_signed.zip * -r && cd ..
    - name: zip quest2
      if: ${{ inputs.build_quest2 }}
      run: |
         cd ${{ inputs.project_name }}_quest2        && zip ../${{ inputs.project_name }}_build_quest2.zip        * -r && cd ..
         cd ${{ inputs.project_name }}_quest2_signed && zip ../${{ inputs.project_name }}_build_quest2_signed.zip * -r && cd ..
    - name: zip quest2 oculus
      if: ${{ inputs.build_quest2_oculus }}
      run: |
         cd ${{ inputs.project_name }}_quest2_oculus        && zip ../${{ inputs.project_name }}_build_quest2_oculus.zip      * -r && cd ..
         cd ${{ inputs.project_name }}_quest2_oculus_signed && zip ../${{ inputs.project_name }}_build_quest2_oculus_signed.zip * -r && cd ..
    - name: create release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: true
        prerelease: false
        release_name: ${{ steps.version.outputs.version }}
        tag_name: ${{ github.ref }}
        #body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}
    - name: upload linux
      if: ${{ inputs.build_linux }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_linux.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_linux.zip
        asset_content_type: application/gzip
    - name: upload linux steam artifact
      if: ${{ (inputs.build_linux) && (inputs.build_steam) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_linux_steam.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_linux_steam.zip
        asset_content_type: application/gzip
    - name: upload windows artifact
      if: ${{ inputs.build_windows }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_windows.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_windows.zip
        asset_content_type: application/gzip
    - name: upload windows steam artifact
      if: ${{ (inputs.build_windows) && (inputs.build_steam) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_windows_steam.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_windows_steam.zip
        asset_content_type: application/gzip
    - name: upload android artifact
      if: ${{ inputs.build_android }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android.zip
        asset_content_type: application/gzip
    - name: upload android signed artifact
      if: ${{ inputs.build_android }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android_signed.zip
        asset_content_type: application/gzip
    - name: upload android admob signed artifact
      if: ${{ (inputs.build_android) && (inputs.build_ads) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android_admob_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android_admob_signed.zip
        asset_content_type: application/gzip
    - name: upload android_googleplay artifact
      if: ${{ inputs.build_android_googleplay }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android_googleplay.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android_googleplay.zip
        asset_content_type: application/gzip
    - name: upload android_googleplay signed artifact
      if: ${{ inputs.build_android_googleplay }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android_googleplay_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android_googleplay_signed.zip
        asset_content_type: application/gzip
    - name: upload android_googleplay admob signed artifact
      if: ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_android_googleplay_admob_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_android_googleplay_admob_signed.zip
        asset_content_type: application/gzip
    - name: upload quest2 artifact
      if: ${{ inputs.build_quest2 }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_quest2.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_quest2.zip
        asset_content_type: application/gzip
    - name: upload quest2 signed artifact
      if: ${{ inputs.build_quest2 }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_quest2_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_quest2_signed.zip
        asset_content_type: application/gzip
    - name: upload quest2 oculus artifact
      if: ${{ inputs.build_quest2_oculus }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_quest2_oculus.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_quest2_oculus.zip
        asset_content_type: application/gzip
    - name: upload quest2 oculus signed artifact
      if: ${{ inputs.build_quest2_oculus }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.project_name }}_build_quest2_oculus_signed.zip
        asset_name: ${{ inputs.project_name }}_${{ github.ref_name }}_quest2_oculus_signed.zip
        asset_content_type: application/gzip
