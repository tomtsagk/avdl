name: Auto-Create Build

# Can be called from other repos
on:
  workflow_call:
    inputs:
      # Project name, should be filename-friendly name, no spaces or special characters
      project_name:
        default: avdl_project
        required: true
        type: string
      # Special variables to compile a specific github project instead
      github_project:
        required: false
        type: string
      github_branch:
        default: master
        required: false
        type: string
      # Special variables for a custom avdl version
      avdl_linux_artifact:
        required: false
        type: string
      avdl_windows_artifact:
        required: false
        type: string
      # Android
      build_android:
        default: false
        required: false
        type: boolean
      build_android_googleplay:
        default: false
        required: false
        type: boolean
      # Ad-supported builds
      build_ads:
        default: false
        required: false
        type: boolean
      # Quest 2
      build_quest2:
        default: false
        required: false
        type: boolean
      build_quest2_oculus:
        default: false
        required: false
        type: boolean
      # Linux
      build_linux:
        default: false
        required: false
        type: boolean
      # Windows
      build_windows:
        default: false
        required: false
        type: boolean
      # Steam
      build_steam:
        default: false
        required: false
        type: boolean
      # itchio
      itchio_user:
        default: 0
        required: false
        type: string
      itchio_project:
        default: 0
        required: false
        type: string
      # if true, upload unsigned builds
      include_unsigned:
        default: false
        required: false
        type: boolean
      # option to disable signed builds
      include_signed:
        default: true
        required: false
        type: boolean
      steamworks_branch:
        default: develop
        required: false
        type: string
      oculus_channel:
        default: store
        required: false
        type: string
    secrets:
      # required for android builds
      ANDROID_KEYSTORE:
        required: false
      ANDROID_KEYSTORE_PASSWORD:
        required: false
      # required for ads
      ADMOB_PROJECT_ID:
        required: false
      ADMOB_INTERSTITIAL_AD_ID:
        required: false
      ADMOB_REWARDED_AD_ID:
        required: false
      # required for quest 2
      OCULUS_API_LINK:
        required: false
      # required for quest 2 oculus
      OCULUS_PROJECT_ID:
        required: false
      # required for google play
      GOOGLE_PLAY_ID:
        required: false
      AVDL_GOOGLE_PLAY_ACHIEVEMENTS:
        required: false
      # required for itchio release
      BUTLER_API_KEY:
        required: false
      # steamworks release
      STEAMWORKS_APPID:
        required: false
      STEAMWORKS_DEPOTID_LINUX:
        required: false
      STEAMWORKS_DEPOTID_WINDOWS:
        required: false
      STEAMWORKS_USERNAME:
        required: false
      STEAMWORKS_TOKEN:
        required: false
      # oculus release
      OCULUS_APPID:
        required: false
      OCULUS_APPSECRET:
        required: false
      OCULUS_CLI_URL:
        required: false
      # d3d11
      BASE64_PFX:
        required: false
      PFX_PASSWORD:
        required: false

env:
  AVDL_BUILD_URL_LINUX: https://github.com/tomtsagk/avdl/releases/download/v0.22.6/avdl_v0.22.6_linux.zip
  AVDL_BUILD_URL_WINDOWS: https://github.com/tomtsagk/avdl/releases/download/v0.22.6/avdl_v0.22.6_windows.zip

jobs:
  # Android
  android:
    if: ${{ (inputs.build_android) || (inputs.build_android_googleplay) }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [android, android_admob, android_googleplay, android_googleplay_admob]
        build_android:
          - ${{ inputs.build_android }}
        build_android_admob:
          - ${{ (inputs.build_android) && (inputs.build_ads) }}
        build_android_googleplay:
          - ${{ inputs.build_android_googleplay }}
        build_android_googleplay_admob:
          - ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: android_admob
            build_android_admob: false
          - build_type: android_googleplay
            build_android_googleplay: false
          - build_type: android_googleplay_admob
            build_android_googleplay_admob: false
    steps:
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner imagemagick
    - name: get_avdl
      if: ${{ inputs.avdl_linux_artifact == '' }}
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
        cd ..
        chmod +x avdl_linux/bin/avdl
    - uses: actions/download-artifact@v4
      if: ${{ inputs.avdl_linux_artifact != '' }}
      with:
        name: ${{ inputs.avdl_linux_artifact }}
        path: avdl_linux
    - name: get_avdl_custom
      if: ${{ inputs.avdl_linux_artifact != '' }}
      run: |
        chmod +x avdl_linux/bin/avdl
    - name: generate_android_project
      if: ${{ matrix.build_type == 'android' }}
      run: ./avdl_linux/bin/avdl --android || cat .avdl_cache/android/.avdl_android_log
    - name: generate_android_project admob
      if: ${{ matrix.build_type == 'android_admob' }}
      run: ./avdl_linux/bin/avdl --android --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }} --admob-ads-rewarded ${{ secrets.ADMOB_REWARDED_AD_ID }} || cat .avdl_cache/android/.avdl_android_log
    - name: generate_android_project googleplay
      if: ${{ matrix.build_type == 'android_googleplay' }}
      run: ./avdl_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }} || cat .avdl_cache/android/.avdl_android_log
    - name: generate_android_project googleplay admob
      if: ${{ matrix.build_type == 'android_googleplay_admob' }}
      run: ./avdl_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }} --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }} --admob-ads-rewarded ${{ secrets.ADMOB_REWARDED_AD_ID }} || cat .avdl_cache/android/.avdl_android_log
    - name: sign_builds
      if: ${{ inputs.include_signed }}
      run: |
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 "avdl_build_android/${{ inputs.project_name }}-release-unsigned.apk" "avdl_build_android/${{ inputs.project_name }}-release-signed.apk"
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' "avdl_build_android/${{ inputs.project_name }}-release-signed.apk"
        rm keystore
    - name: upload_artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}"
        path: avdl_build_android

  # Quest 2
  quest2:
    if: ${{ inputs.build_quest2 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [quest2, quest2_oculus]
        build_quest2:
          - ${{ inputs.build_quest2 }}
        build_quest2_oculus:
          - ${{ inputs.build_quest2_oculus }}
        exclude:
          - build_type: quest2
            build_quest2: false
          - build_type: quest2_oculus
            build_quest2_oculus: false
    steps:
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner imagemagick
    - name: get_avdl
      if: ${{ inputs.avdl_linux_artifact == '' }}
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
        cd ..
        chmod +x avdl_linux/bin/avdl
    - uses: actions/download-artifact@v4
      if: ${{ inputs.avdl_linux_artifact != '' }}
      with:
        name: ${{ inputs.avdl_linux_artifact }}
        path: avdl_linux
    - name: get_avdl_custom
      if: ${{ inputs.avdl_linux_artifact != '' }}
      run: |
        chmod +x avdl_linux/bin/avdl
    - uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2' }}
      run: ./avdl_linux/bin/avdl --quest2
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2_oculus' }}
      run: ./avdl_linux/bin/avdl --quest2-oculus ${{ secrets.OCULUS_PROJECT_ID }}
    - name: get_oculus_sdk
      env:
        oculus_api_link: ${{ secrets.OCULUS_API_LINK }}
      run: |
        wget ${oculus_api_link} --quiet
        mkdir avdl_oculus_build
        mv oculus_mobile_sdk.zip avdl_oculus_build
        cd avdl_oculus_build
        unzip oculus_mobile_sdk.zip
        cp ../avdl_build_quest2/ -r avdl_vr_bk/AvdlProject
    - name: compile
      run: |
        cd avdl_oculus_build/avdl_vr_bk/AvdlProject/Projects/Android
        chmod +x ../../../gradlew
        ../../../gradlew assembleDebug
        ../../../gradlew assembleRelease
        mv build/outputs/apk/debug/Android-debug.apk ../../../../../${{ inputs.project_name }}_quest2_debug.apk
        mv build/outputs/apk/release/Android-release.apk ../../../../../${{ inputs.project_name }}_quest2_unsigned.apk
    - name: sign_builds
      if: ${{ inputs.include_signed }}
      run: |
        cd avdl_oculus_build/avdl_vr_bk/AvdlProject/Projects/Android
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 ../../../../../${{ inputs.project_name }}_quest2_unsigned.apk ../../../../../${{ inputs.project_name }}_quest2.apk
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' ../../../../../${{ inputs.project_name }}_quest2.apk
        rm keystore
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_debug
        path: ${{ inputs.project_name }}_quest2_debug.apk
    - name: upload_artifact_unsigned
      if: ${{ inputs.include_unsigned }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_unsigned
        path: ${{ inputs.project_name }}_quest2_unsigned.apk
    - name: upload_artifact
      if: ${{ inputs.include_signed }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_quest2.apk

  # Linux
  linux-x86_64:
    if: ${{ inputs.build_linux }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux-x86_64, linux_steam-x86_64]
        build_linux:
          - ${{ inputs.build_linux }}
        build_linux_steam:
          - ${{ (inputs.build_linux) && (inputs.build_steam) }}
        exclude:
          - build_type: linux-x86_64
            build_linux: false
          - build_type: linux_steam-x86_64
            build_linux_steam: false
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc libgl1-mesa-dev imagemagick
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - name: get_avdl
      if: ${{ inputs.avdl_linux_artifact == '' }}
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
        cd ..
        chmod +x avdl_linux/bin/avdl
    - uses: actions/download-artifact@v4
      if: ${{ inputs.avdl_linux_artifact != '' }}
      with:
        name: ${{ inputs.avdl_linux_artifact }}
        path: avdl_linux
    - name: get_avdl_custom
      if: ${{ inputs.avdl_linux_artifact != '' }}
      run: |
        chmod +x avdl_linux/bin/avdl
    - name: compile_project
      if: ${{ matrix.build_type == 'linux-x86_64' }}
      run: |
        ./avdl_linux/bin/avdl -i ./avdl_linux/dependencies/linux/include -L ./avdl_linux/dependencies/linux/lib --standalone
        mkdir avdl_build/dependencies
        cp ./avdl_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
        rm avdl_build/dependencies/*steam*
    - name: compile_project steam
      if: ${{ matrix.build_type == 'linux_steam-x86_64' }}
      run: |
        chmod +x avdl_linux/bin/avdl
        ./avdl_linux/bin/avdl -i ./avdl_linux/dependencies/linux/include -L ./avdl_linux/dependencies/linux/lib --standalone --steam
        mkdir avdl_build/dependencies
        cp ./avdl_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
    - name: verify
      if: ${{ matrix.build_type == 'linux-x86_64' }}
      run: |
        cd avdl_build/
        chmod +x bin/${{ inputs.project_name }}
        LD_LIBRARY_PATH=./dependencies/ ./bin/${{ inputs.project_name }} --verify
        cd ../
    - name: create_tar_archive
      run: |
        cd avdl_build
        tar czf ../${{ inputs.project_name }}_${{ matrix.build_type }}.tar.gz *
    - name: upload_artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_${{ matrix.build_type }}.tar.gz

  # Windows
  windows-x86_64:
    if: ${{ inputs.build_windows }}
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [windows-x86_64, windows_steam-x86_64]
        build_windows:
          - ${{ inputs.build_windows }}
        build_windows_steam:
          - ${{ (inputs.build_windows) && (inputs.build_steam) }}
        exclude:
          - build_type: windows-x86_64
            build_windows: false
          - build_type: windows_steam-x86_64
            build_windows_steam: false
    steps:
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - name: get_avdl
      if: ${{ inputs.avdl_windows_artifact == '' }}
      run: |
        C:\msys64\usr\bin\wget.exe -q $Env:AVDL_BUILD_URL_WINDOWS -O avdl_windows.zip
        mkdir AVDL_BUILD
        unzip avdl_windows.zip -d AVDL_BUILD
    - uses: actions/download-artifact@v4
      if: ${{ inputs.avdl_windows_artifact != '' }}
      with:
        name: ${{ inputs.avdl_windows_artifact }}
        path: AVDL_BUILD
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: freetype
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/freetype "C:/Program Files (x86)/freetype"
    - run: choco install -y imagemagick
    - name: compile_project
      if: ${{ matrix.build_type == 'windows-x86_64' }}
      shell: bash
      run: |
        AVDL_BUILD/share/avdl/scripts/avdl_project_windows.bat build_windows AVDL_BUILD
    - name: compile_project steam
      if: ${{ matrix.build_type == 'windows_steam-x86_64' }}
      shell: bash
      run: |
        AVDL_BUILD/share/avdl/scripts/avdl_project_windows.bat build_windows AVDL_BUILD steam
    - name: upload_artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: build_windows
    - name: upload_artifact_vs
      if: ${{ false }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_vs
        path: build/

  # Windows d3d11 - preparation
  windows_d3d11_prepare:
    if: ${{ inputs.build_windows && false }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [windows-d3d11]
        build_windows_d3d11:
          - ${{ inputs.build_windows }}
        exclude:
          - build_type: windows-d3d11
            build_windows_d3d11: false
    steps:
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - name: get_avdl
      if: ${{ inputs.avdl_linux_artifact == '' }}
      run: |
        mkdir avdl_linux
        cd avdl_linux
        wget -q $AVDL_BUILD_URL_LINUX -O avdl_linux.zip
        unzip avdl_linux.zip
        rm avdl_linux.zip
        cd ..
        mv avdl_linux AVDL_BUILD
    - uses: actions/download-artifact@v4
      if: ${{ inputs.avdl_linux_artifact != '' }}
      with:
        name: ${{ inputs.avdl_linux_artifact }}
        path: avdl_linux
    - name: unpack_avdl
      if: ${{ inputs.avdl_linux_artifact != '' }}
      shell: bash
      run: |
        mv avdl_linux AVDL_BUILD
    - name: compile
      shell: bash
      run: |
        chmod +x ./AVDL_BUILD/bin/avdl
        ./AVDL_BUILD/bin/avdl --d3d11
    - name: prepare_freetype
      shell: bash
      run: |
        mkdir avdl_build_d3d11/dependencies
        cd avdl_build_d3d11/dependencies
        git clone https://github.com/ubawurinna/freetype-windows-binaries freetype_repository
        cp -r freetype_repository/include/* .
        cp -r freetype_repository/release\ dll/* .
        rm -rf freetype_repository
    - name: Upload prepare artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_prepare
        path: avdl_build_d3d11
  # Windows d3d11
  windows_d3d11:
    runs-on: windows-latest
    needs: [windows_d3d11_prepare]
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_windows-d3d11_prepare
        path: avdl_project
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Build app for release
      run: msbuild "avdl_project/avdl_project.vcxproj" /p:AppxBundlePlatforms="x86|x64" /p:Configuration=Release /p:AppxBundle=Always /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: Packages\
        Configuration: Release
    - name: Decode the pfx
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_PFX }}")
        $certificatePath = Join-Path -Path ./ -ChildPath avdl_project_TemporaryKey.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
    - name: Sign
      run: |
        $signtool = "C:\Program Files (x86)\Windows Kits\10\App Certification Kit\signtool.exe"
        & $signtool sign /fd sha256 /a /f avdl_project_TemporaryKey.pfx /p ${{ secrets.PFX_PASSWORD }} avdl_project/AppPackages/avdl_project/avdl_project_1.0.0.0_Test/avdl_project_1.0.0.0_x86_x64.msixbundle
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.project_name }}_windows-d3d11
        path: avdl_project/AppPackages/avdl_project/avdl_project_1.0.0.0_Test

  # Itch.io release
  release_itchio:
    if: ${{ always() && !cancelled() && inputs.itchio_user != '' && inputs.itchio_project != '' && github.ref_type == 'tag' }}
    runs-on: ubuntu-20.04
    needs: [linux-x86_64, windows-x86_64, android, quest2]
    strategy:
      matrix:
        build_type: [linux-x86_64, windows-x86_64, android, quest2]
        build_android:
          - ${{ inputs.build_android }}
        build_linux-x86_64:
          - ${{ inputs.build_linux }}
        build_windows-x86_64:
          - ${{ inputs.build_windows }}
        build_quest2:
          - ${{ inputs.build_quest2 }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: linux-x86_64
            build_linux-x86_64: false
          - build_type: windows-x86_64
            build_windows-x86_64: false
          - build_type: quest2
            build_quest2: false
    steps:
    # get build
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    - name: get butler
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        ./butler -V
    # publish tar archive (linux)
    - name: prepare and upload - linux
      if: ${{ (matrix.build_type == 'linux-x86_64') }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        ./butler push ${{ inputs.project_name }}_${{ matrix.build_type }}/${{ inputs.project_name }}_${{ matrix.build_type }}.tar.gz ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:${{ matrix.build_type }} --userversion ${VERSION:1}
    # publish zip archive (windows)
    - name: prepare and upload - windows
      if: ${{ (matrix.build_type == 'windows-x86_64') }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        cd ${{ inputs.project_name }}_${{ matrix.build_type }} && zip ../${{ inputs.project_name }}_${{ matrix.build_type }}.zip * -r && cd ..
        ./butler push ${{ inputs.project_name }}_${{ matrix.build_type }}.zip ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:${{ matrix.build_type }} --userversion ${VERSION:1}
    # publish single .apk (android & quest 2)
    - name: prepare and upload - android/quest2
      if: ${{ (matrix.build_type == 'android') || (matrix.build_type == 'quest2') }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        mv ${{ inputs.project_name }}_${{ matrix.build_type }}/${{ inputs.project_name }}_${{ matrix.build_type }}.apk ${{ inputs.project_name }}_${{ matrix.build_type }}.apk
        ./butler push ${{ inputs.project_name }}_${{ matrix.build_type }}.apk ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:${{ matrix.build_type }} --userversion ${VERSION:1}

  # Oculus release
  release_oculus:
    if: ${{ always() && !cancelled() && inputs.build_quest2_oculus && github.ref_type == 'tag' }}
    runs-on: windows-latest
    needs: [quest2]
    steps:
    # get build
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_quest2_oculus
        path: ${{ inputs.project_name }}_quest2_oculus
    - name: get oculus cli
      run: |
        C:\msys64\usr\bin\wget.exe -q ${{ secrets.OCULUS_CLI_URL }} -O ovr-platform-util.exe
    # publish apk
    - name: prepare and upload
      shell: bash
      run: |
        mv ${{ inputs.project_name }}_quest2_oculus/${{ inputs.project_name }}_quest2.apk ${{ inputs.project_name }}_quest2.apk
        ./ovr-platform-util.exe upload-quest-build --app_id ${{ secrets.OCULUS_APPID }} --app_secret ${{ secrets.OCULUS_APPSECRET }} --apk ${{ inputs.project_name }}_quest2.apk --channel ${{ inputs.oculus_channel }}

  # Steamworks release
  release_steamworks:
    if: ${{ always() && !cancelled() && inputs.build_steam && inputs.build_linux && inputs.build_windows && inputs.steamworks_branch && github.ref_type == 'tag'}}
    runs-on: ubuntu-20.04
    needs: [linux-x86_64, windows-x86_64]
    steps:
    # get build linux
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_linux_steam-x86_64
        path: ${{ inputs.project_name }}_linux_steam-x86_64
    # get build windows
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_windows_steam-x86_64
        path: ${{ inputs.project_name }}_windows_steam-x86_64
    # prepare for publishing
    - name: prepare zipping
      run: |
        sudo apt update && sudo apt install -y zip
        mkdir -p ~/.steam/steam/config/
        echo '${{ secrets.STEAMWORKS_TOKEN }}' | base64 -d > ~/.steam/steam/config/config.vdf
        tar xzf ${{ inputs.project_name }}_linux_steam-x86_64/${{ inputs.project_name }}_linux_steam-x86_64.tar.gz -C ${{ inputs.project_name }}_linux_steam-x86_64
    # Steamworks
    - name: get steamworks
      run: |
        wget https://www.dropbox.com/s/khi7egkib9we32v/steamworks_sdk.zip
        unzip steamworks_sdk.zip
    # prepare linux and windows
    - name: prepare linux and windows
      run: |
        mkdir -p sdk/tools/ContentBuilder/content/linux
        mkdir -p sdk/tools/ContentBuilder/content/windows
        mv ${{ inputs.project_name }}_linux_steam-x86_64/*   sdk/tools/ContentBuilder/content/linux
        mv ${{ inputs.project_name }}_windows_steam-x86_64/* sdk/tools/ContentBuilder/content/windows
    # prepare script
    - name: prepare steamworks script
      run: |
        echo "\"AppBuild\" {" > sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"AppID\" \""${{ secrets.STEAMWORKS_APPID }}"\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"Desc\" \""${{ inputs.project_name }}" - "${{ github.ref_name }}"\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"ContentRoot\" \"..\\content\\\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"BuildOutput\" \"..\\output\\\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"SetLive\" \""${{ inputs.steamworks_branch }}"\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"Depots\" {" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        # windows
        echo "\""${{ secrets.STEAMWORKS_DEPOTID_WINDOWS }}"\" {" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"FileMapping\" {" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"LocalPath\" \"windows/*\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"DepotPath\" \".\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"recursive\" \"1\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        # linux
        echo "\""${{ secrets.STEAMWORKS_DEPOTID_LINUX }}"\" {" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"FileMapping\" {" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"LocalPath\" \"linux/*\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"DepotPath\" \".\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "\"recursive\" \"1\"" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
        echo "}" >> sdk/tools/ContentBuilder/scripts/avdl_app_build.vdf
    # publish builds (linux & windows)
    - name: upload
      run: |
        chmod +x sdk/tools/ContentBuilder/builder_linux/steamcmd.sh sdk/tools/ContentBuilder/builder_linux/linux32/steamcmd
        sdk/tools/ContentBuilder/builder_linux/steamcmd.sh +login ${{ secrets.STEAMWORKS_USERNAME }} +run_app_build ../scripts/avdl_app_build.vdf +quit

  # Github release
  release_github:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: [linux-x86_64, windows-x86_64, android, quest2]
    runs-on: ubuntu-20.04
    steps:
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release create "$tag" -F metadata/changelog.md --title="${GITHUB_REPOSITORY#*/} - ${tag}"

  release_github_assets:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: release_github
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux-x86_64, linux_steam-x86_64, windows-x86_64, windows_steam-x86_64, android, android_admob, android_googleplay, android_googleplay_admob, quest2, quest2_oculus]
        build_android:
          - ${{ inputs.build_android }}
        build_android_admob:
          - ${{ (inputs.build_android) && (inputs.build_ads) }}
        build_android_googleplay:
          - ${{ inputs.build_android_googleplay }}
        build_android_googleplay_admob:
          - ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
        build_linux-x86_64:
          - ${{ inputs.build_linux }}
        build_linux_steam-x86_64:
          - ${{ (inputs.build_linux) && (inputs.build_steam) }}
        build_windows-x86_64:
          - ${{ inputs.build_windows }}
        build_windows_steam-x86_64:
          - ${{ (inputs.build_windows) && (inputs.build_steam) }}
        build_quest2:
          - ${{ inputs.build_quest2 }}
        build_quest2_oculus:
          - ${{ inputs.build_quest2_oculus }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: android_admob
            build_android_admob: false
          - build_type: android_googleplay
            build_android_googleplay: false
          - build_type: android_googleplay_admob
            build_android_googleplay_admob: false
          - build_type: linux-x86_64
            build_linux-x86_64: false
          - build_type: linux_steam-x86_64
            build_linux_steam-x86_64: false
          - build_type: windows-x86_64
            build_windows-x86_64: false
          - build_type: windows_steam-x86_64
            build_windows_steam-x86_64: false
          - build_type: quest2
            build_quest2: false
          - build_type: quest2_oculus
            build_quest2_oculus: false
    steps:
    # possibly needs this ?
    - name: init_project
      if: ${{ inputs.github_project == '' }}
      uses: actions/checkout@v3
    - name: init_project custom
      if: ${{ inputs.github_project != '' }}
      run: |
        git clone https://github.com/${{ inputs.github_project }} .
        git checkout ${{ inputs.github_branch }}
    # get build
    - uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    # create archive
    - name: Create zip archive
      if: ${{ (matrix.build_type != 'linux-x86_64') && (matrix.build_type != 'linux_steam-x86_64') }}
      run: |
        cd ${{ inputs.project_name }}_${{ matrix.build_type }} && zip ../${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.zip * -r
    # upload to release - zip
    - name: Upload to release
      if: ${{ (matrix.build_type != 'linux-x86_64') && (matrix.build_type != 'linux_steam-x86_64') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release upload "$tag" ${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.zip
    # upload to release - tar
    - name: Upload to release
      if: ${{ (matrix.build_type == 'linux-x86_64') || (matrix.build_type == 'linux_steam-x86_64') }}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        mv ${{ inputs.project_name }}_${{ matrix.build_type }}/${{ inputs.project_name }}_${{ matrix.build_type }}.tar.gz ${{ inputs.project_name }}_${{ matrix.build_type }}/${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.tar.gz
        gh release upload "$tag" ${{ inputs.project_name }}_${{ matrix.build_type }}/${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.tar.gz
