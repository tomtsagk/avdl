name: Auto-Create Build

# Can be called from other repos
on:
  workflow_call:
    inputs:
      # Project name, should be filename-friendly name, no spaces or special characters
      project_name:
        default: avdl_project
        required: true
        type: string
      build_android:
        default: false
        required: false
        type: boolean
      build_android_googleplay:
        default: false
        required: false
        type: boolean
      # include ad-supported builds
      build_ads:
        default: false
        required: false
        type: boolean
      build_quest2:
        default: false
        required: false
        type: boolean
      build_quest2_oculus:
        default: false
        required: false
        type: boolean
      build_linux:
        default: false
        required: false
        type: boolean
      build_windows:
        default: false
        required: false
        type: boolean
      # include steam builds
      build_steam:
        default: false
        required: false
        type: boolean
      # itchio
      itchio_user:
        default: 0
        required: false
        type: string
      itchio_project:
        default: 0
        required: false
        type: string
      # if true, upload unsigned builds
      include_unsigned:
        default: false
        required: false
        type: boolean
    secrets:
      # required for android builds
      ANDROID_KEYSTORE:
        required: false
      ANDROID_KEYSTORE_PASSWORD:
        required: false
      # required for ads
      ADMOB_PROJECT_ID:
        required: false
      ADMOB_INTERSTITIAL_AD_ID:
        required: false
      # required for quest 2
      OCULUS_API_LINK:
        required: false
      # required for quest 2 oculus
      OCULUS_PROJECT_ID:
        required: false
      # required for google play
      GOOGLE_PLAY_ID:
        required: false
      AVDL_GOOGLE_PLAY_ACHIEVEMENTS:
        required: false
      # required for itchio release
      BUTLER_API_KEY:
        required: false

env:
  AVDL_BUILD_URL_LINUX: https://github.com/tomtsagk/avdl/releases/download/v0.13.4/avdl_v0.13.4_linux.zip
  AVDL_BUILD_URL_WINDOWS: https://github.com/tomtsagk/avdl/releases/download/v0.13.4/avdl_v0.13.4_windows.zip

jobs:
  # Android
  android:
    if: ${{ (inputs.build_android) || (inputs.build_android_googleplay) }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [android, android_admob, android_googleplay, android_googleplay_admob]
        build_android:
          - ${{ inputs.build_android }}
        build_android_admob:
          - ${{ (inputs.build_android) && (inputs.build_ads) }}
        build_android_googleplay:
          - ${{ inputs.build_android_googleplay }}
        build_android_googleplay_admob:
          - ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: android_admob
            build_android_admob: false
          - build_type: android_googleplay
            build_android_googleplay: false
          - build_type: android_googleplay_admob
            build_android_googleplay_admob: false
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner
    - name: get_avdl
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
        cd ..
        chmod +x avdl_linux/bin/avdl
    - name: generate_android_project
      if: ${{ matrix.build_type == 'android' }}
      run: ./avdl_linux/bin/avdl --android
    - name: generate_android_project admob
      if: ${{ matrix.build_type == 'android_admob' }}
      run: ./avdl_linux/bin/avdl --android --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }}
    - name: generate_android_project googleplay
      if: ${{ matrix.build_type == 'android_googleplay' }}
      run: ./avdl_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }}
    - name: generate_android_project googleplay admob
      if: ${{ matrix.build_type == 'android_googleplay_admob' }}
      run: ./avdl_linux/bin/avdl --android-google-play ${{ secrets.GOOGLE_PLAY_ID }} ${{ secrets.AVDL_GOOGLE_PLAY_ACHIEVEMENTS }} --admob-ads ${{ secrets.ADMOB_PROJECT_ID }} --admob-ads-fullscreen ${{ secrets.ADMOB_INTERSTITIAL_AD_ID }}
    - name: compile
      run: |
        cd avdl_build_android
        chmod +x gradlew
        ./gradlew build
    - name: package_builds
      run: |
        mkdir "game_output_unsigned"
        mkdir "game_output_debug"
        mkdir "game_output"
        mv avdl_build_android/app/build/outputs/apk/release/app-universal-release-unsigned.apk "game_output_unsigned/game_android.apk"
        mv avdl_build_android/app/build/outputs/apk/debug/app-universal-debug.apk "game_output_debug/game_android_debug.apk"
        cp avdl_build_android/app/build/outputs/native-debug-symbols/release/native-debug-symbols.zip "game_output/native-debug-symbols.zip"
        cp avdl_build_android/app/build/outputs/mapping/release/mapping.txt "game_output/mapping.txt"
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 "game_output_unsigned/game_android.apk" "game_output/game_android.apk"
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' "game_output/game_android.apk"
        rm keystore
    - name: upload_artifact_unsigned
      uses: actions/upload-artifact@v3
      if: ${{ inputs.include_unsigned }}
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}_unsigned"
        path: game_output_unsigned/game_android.apk
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}"
        path: game_output
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v3
      with:
        name: "${{ inputs.project_name }}_${{ matrix.build_type }}_debug"
        path: game_output_debug/game_android_debug.apk

  # Quest 2
  quest2:
    if: ${{ inputs.build_quest2 }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_type: [quest2, quest2_oculus]
        build_quest2:
          - ${{ inputs.build_quest2 }}
        build_quest2_oculus:
          - ${{ inputs.build_quest2_oculus }}
        exclude:
          - build_type: quest2
            build_quest2: false
          - build_type: quest2_oculus
            build_quest2_oculus: false
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - name: apt packages
      run: |
         sudo apt update && sudo apt install -y zipalign apksigner
    - name: get_avdl
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
        chmod +x bin/avdl
    - uses: actions/setup-java@v3
      with:
        distribution: 'oracle'
        java-version: '17'
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2' }}
      run: ./avdl_linux/bin/avdl --quest2
    - name: generate_quest2_project
      if: ${{ matrix.build_type == 'quest2_oculus' }}
      run: ./avdl_linux/bin/avdl --quest2-oculus ${{ secrets.OCULUS_PROJECT_ID }}
    - name: get_oculus_sdk
      env:
        oculus_api_link: ${{ secrets.OCULUS_API_LINK }}
      run: |
        wget ${oculus_api_link} --quiet
        mkdir avdl_oculus_build
        mv oculus_mobile_sdk.zip avdl_oculus_build
        cd avdl_oculus_build
        unzip oculus_mobile_sdk.zip
        cp ../avdl_build_quest2/ -r avdl_vr_bk/AvdlProject
    - name: compile
      run: |
        cd avdl_oculus_build/avdl_vr_bk/AvdlProject/Projects/Android
        chmod +x ../../../gradlew
        ../../../gradlew assembleDebug
        ../../../gradlew assembleRelease
        mv build/outputs/apk/debug/Android-debug.apk ../../../../../game_quest2_debug.apk
        mv build/outputs/apk/release/Android-release.apk ../../../../../game_quest2_unsigned.apk
        echo '${{ secrets.ANDROID_KEYSTORE }}' | base64 -d > keystore
        zipalign -v 4 ../../../../../game_quest2_unsigned.apk ../../../../../game_quest2.apk
        apksigner sign --ks keystore --ks-pass 'pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }}' ../../../../../game_quest2.apk
        rm keystore
    - name: upload_artifact_debug
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_debug
        path: game_quest2_debug.apk
    - name: upload_artifact
      if: ${{ inputs.include_unsigned }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_unsigned
        path: game_quest2_unsigned.apk
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: game_quest2.apk

  # Linux
  linux-x86_64:
    if: ${{ inputs.build_linux }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux-x86_64, linux_steam-x86_64]
        build_linux:
          - ${{ inputs.build_linux }}
        build_linux_steam:
          - ${{ (inputs.build_linux) && (inputs.build_steam) }}
        exclude:
          - build_type: linux-x86_64
            build_linux: false
          - build_type: linux_steam-x86_64
            build_linux_steam: false
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc libgl1-mesa-dev
    - name: init_project
      uses: actions/checkout@v3
    - name: get_avdl
      run: |
        mkdir avdl_linux
        wget $AVDL_BUILD_URL_LINUX -O avdl_linux/avdl_linux.zip
        cd avdl_linux
        unzip avdl_linux.zip
    - name: compile_project
      if: ${{ matrix.build_type == 'linux-x86_64' }}
      run: |
        chmod +x avdl_linux/bin/avdl
        ./avdl_linux/bin/avdl -i ./avdl_linux/dependencies/linux/include -L ./avdl_linux/dependencies/linux/lib --standalone
        mkdir avdl_build/dependencies
        cp ./avdl_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
        rm avdl_build/dependencies/*steam*
    - name: compile_project steam
      if: ${{ matrix.build_type == 'linux_steam-x86_64' }}
      run: |
        chmod +x avdl_linux/bin/avdl
        ./avdl_linux/bin/avdl -i ./avdl_linux/dependencies/linux/include -L ./avdl_linux/dependencies/linux/lib --standalone --steam
        mkdir avdl_build/dependencies
        cp ./avdl_linux/dependencies/linux/lib/*.so* avdl_build/dependencies
    - name: verify
      if: ${{ matrix.build_type == 'linux-x86_64' }}
      run: |
        cd avdl_build/
        chmod +x bin/${{ inputs.project_name }}
        LD_LIBRARY_PATH=./dependencies/ ./bin/${{ inputs.project_name }} --verify
        cd ../
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: avdl_build

  # Windows
  windows-x86_64:
    if: ${{ inputs.build_windows }}
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [windows-x86_64, windows_steam-x86_64]
        build_windows:
          - ${{ inputs.build_windows }}
        build_windows_steam:
          - ${{ (inputs.build_windows) && (inputs.build_steam) }}
        exclude:
          - build_type: windows
            build_windows: false
          - build_type: windows_steam
            build_windows_steam: false
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: get_avdl
      run: |
        C:\msys64\usr\bin\wget.exe -q $Env:AVDL_BUILD_URL_WINDOWS -O avdl_windows.zip
    - name: unpack_avdl
      shell: bash
      run: |
        mkdir avdl_windows
        mv avdl_windows.zip avdl_windows
        cd avdl_windows
        unzip avdl_windows.zip
        rm avdl_windows.zip
        cd ..
        mv avdl_windows/* AVDL_BUILD
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_project
      if: ${{ matrix.build_type == 'windows-x86_64' }}
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/share/avdl/cengine/*.cpp AVDL_BUILD/include/*.h cengine
        mkdir build
        AVDL_BUILD/bin/avdl.exe -t
        AVDL_BUILD/bin/avdl.exe --cmake
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="GAME_BUILD"
        cmake --build . --config Release
        cmake --install .
    - name: compile_project steam
      if: ${{ matrix.build_type == 'windows_steam-x86_64' }}
      shell: bash
      run: |
        mkdir cengine
        cp -r AVDL_BUILD/share/avdl/cengine/*.c AVDL_BUILD/share/avdl/cengine/*.cpp AVDL_BUILD/include/*.h cengine
        mkdir build
        AVDL_BUILD/bin/avdl.exe -t
        AVDL_BUILD/bin/avdl.exe --cmake
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="GAME_BUILD" -DAVDL_STEAM=1
        cmake --build . --config Release
        cmake --install .
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: build/GAME_BUILD
    - name: upload_artifact_vs
      if: ${{ false }}
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}_vs
        path: build/

  # Itch.io release
  release_itchio:
    if: ${{ always() && !cancelled() && inputs.itchio_user != '' && inputs.itchio_project != '' && github.ref_type == 'tag' }}
    runs-on: ubuntu-20.04
    needs: [linux-x86_64, windows-x86_64, android, quest2]
    strategy:
      matrix:
        build_type: [linux-x86_64, windows-x86_64, android, quest2]
        build_android:
          - ${{ inputs.build_android }}
        build_linux-x86_64:
          - ${{ inputs.build_linux }}
        build_windows-x86_64:
          - ${{ inputs.build_windows }}
        build_quest2:
          - ${{ inputs.build_quest2 }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: linux-x86_64
            build_linux-x86_64: false
          - build_type: windows-x86_64
            build_windows-x86_64: false
          - build_type: quest2
            build_quest2: false
    steps:
    # get build
    - uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    - name: get butler
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        ./butler -V
    # publish whole directory (linux & windows)
    - name: prepare and upload
      if: ${{ (inputs.build_linux) || (inputs.build_windows) }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        cd ${{ inputs.project_name }}_${{ matrix.build_type }} && zip ../${{ inputs.project_name }}_${{ matrix.build_type }}.zip * -r && cd ..
        ./butler push ${{ inputs.project_name }}_${{ matrix.build_type }}.zip ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:${{ matrix.build_type }} --userversion ${VERSION:1}
    # publish single .apk (android & quest 2)
    - name: prepare and upload android
      if: ${{ (inputs.build_android) || (inputs.build_quest2) }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      run: |
        VERSION=${{ github.ref_name }}
        mv ${{ inputs.project_name }}_${{ matrix.build_type }}/game_${{ matrix.build_type }}.apk ${{ inputs.project_name }}_${{ inputs.build_type }}.apk
        ./butler push ${{ inputs.project_name }}_${{ matrix.build_type }}.apk ${{ inputs.itchio_user }}/${{ inputs.itchio_project }}:${{ matrix.build_type }} --userversion ${VERSION:1}

  # Github release
  release_github:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: [linux-x86_64, windows-x86_64, android, quest2]
    runs-on: ubuntu-20.04
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release create "$tag" -F metadata/changelog.md --title="${GITHUB_REPOSITORY#*/} - ${tag}"

  release_github_assets:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: release_github
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux-x86_64, linux_steam-x86_64, windows-x86_64, windows_steam-x86_64, android, android_admob, android_googleplay, android_googleplay_admob, quest2, quest2_oculus]
        build_android:
          - ${{ inputs.build_android }}
        build_android_admob:
          - ${{ (inputs.build_android) && (inputs.build_ads) }}
        build_android_googleplay:
          - ${{ inputs.build_android_googleplay }}
        build_android_googleplay_admob:
          - ${{ (inputs.build_android_googleplay) && (inputs.build_ads) }}
        build_linux-x86_64:
          - ${{ inputs.build_linux }}
        build_linux_steam-x86_64:
          - ${{ (inputs.build_linux) && (inputs.build_steam) }}
        build_windows-x86_64:
          - ${{ inputs.build_windows }}
        build_windows_steam-x86_64:
          - ${{ (inputs.build_windows) && (inputs.build_steam) }}
        build_quest2:
          - ${{ inputs.build_quest2 }}
        build_quest2_oculus:
          - ${{ inputs.build_quest2_oculus }}
        exclude:
          - build_type: android
            build_android: false
          - build_type: android_admob
            build_android_admob: false
          - build_type: android_googleplay
            build_android_googleplay: false
          - build_type: android_googleplay_admob
            build_android_googleplay_admob: false
          - build_type: linux-x86_64
            build_linux-x86_64: false
          - build_type: linux_steam-x86_64
            build_linux_steam-x86_64: false
          - build_type: windows-x86_64
            build_windows-x86_64: false
          - build_type: windows_steam-x86_64
            build_windows_steam-x86_64: false
          - build_type: quest2
            build_quest2: false
          - build_type: quest2_oculus
            build_quest2_oculus: false
    steps:
    # possibly needs this ?
    - name: init_project
      uses: actions/checkout@v3
    # get build
    - uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.project_name }}_${{ matrix.build_type }}
        path: ${{ inputs.project_name }}_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    # publish whole directory
    - name: prepare and upload
      run: |
        cd ${{ inputs.project_name }}_${{ matrix.build_type }} && zip ../${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.zip * -r && cd ..
    # upload to release
    - name: Upload to release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release upload "$tag" ${{ inputs.project_name }}_${{ github.ref_name }}_${{ matrix.build_type }}.zip
