name: Create Build

on:
  push:
    branches:
      - develop
      - master
    tags:
      "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - develop
      - master

env:
  # dependencies
  SDL_VERSION_WINDOWS: 2.0.22
  SDL_MIXER_VERSION_WINDOWS: 2.6.0
  GLEW_VERSION_WINDOWS: 2.2.0
  ZLIB_VERSION_WINDOWS: 1.3.1
  FREETYPE_VERSION_LINUX: VER-2-13-1

jobs:
  dependencies_linux:
    runs-on: ubuntu-20.04
    steps:
    - name: init_avdl
      uses: actions/checkout@v1
    - name: cache
      id: cache
      uses: actions/cache@v3
      with:
        key: avdl_dependencies_linux_v14
        path: avdl_dependencies_linux
    - name: ubuntu_dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: sudo ./scripts/install_dependencies_ubuntu.sh
    - name: avdl_dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: sudo ./scripts/dependencies_linux.sh avdl_dependencies_linux && sudo chown -R "$USER" avdl_dependencies_linux
    - name: steamworks
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      env:
        steamworks_api_link: ${{ secrets.STEAMWORKS_API_LINK }}
      run: |
        wget ${steamworks_api_link} --quiet
        unzip steamworks_sdk.zip
        mv sdk/redistributable_bin/linux64/libsteam_api.so avdl_dependencies_linux/linux/lib
        mv sdk/redistributable_bin/steam_api.dll avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/steam_api.lib avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/win64/steam_api64.dll avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/win64/steam_api64.lib avdl_dependencies_linux/windows/lib
        cp sdk/public/steam/*.h avdl_dependencies_linux/linux/include
        cp sdk/public/steam/*.h avdl_dependencies_linux/windows/include
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: avdl_dependencies_linux
  dependencies_windows:
    runs-on: windows-latest
    steps:
    - name: init_avdl
      uses: actions/checkout@v1
    - name: cache
      id: cache
      uses: actions/cache@v3
      with:
        key: avdl_dependencies_windows_v13
        path: avdl_dependencies_windows
    - name: dependencies_windows
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: ./scripts/dependencies_windows.bat avdl_dependencies_windows
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: avdl_dependencies_windows
  build_linux:
    runs-on: ubuntu-20.04
    needs: [dependencies_windows, dependencies_linux]
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc pkg-config libgl1-mesa-dev unzip imagemagick
    - name: init_avdl
      uses: actions/checkout@v1
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: AVDL_BUILD/dependencies
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: AVDL_BUILD/dependencies
    - name: build & package avdl
      run: |
        make -j6 prefix=AVDL_BUILD/ CC=gcc
        make -j6 prefix=AVDL_BUILD/ CC=gcc install
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_linux
        path: AVDL_BUILD
  build_windows:
    runs-on: windows-latest
    needs: [dependencies_windows, dependencies_linux]
    steps:
    - name: init_avdl
      uses: actions/checkout@v1
    - name: compile
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="AVDL_BUILD"
        cmake --build . --config Release
        cmake --install .
        cd ..
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: build/AVDL_BUILD/dependencies
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: build/AVDL_BUILD/dependencies
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_windows
        path: build/AVDL_BUILD

  # Github release
  release_github:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: [build_linux, build_windows]
    runs-on: ubuntu-20.04
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release create "$tag" -F metadata/changelog.md --title="${GITHUB_REPOSITORY#*/} - ${tag}"

  release_github_assets:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: release_github
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux, windows]
    steps:
    # possibly needs this ?
    - name: init_project
      uses: actions/checkout@v3
    # get build
    - uses: actions/download-artifact@v3
      with:
        name: avdl_${{ matrix.build_type }}
        path: avdl_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    # publish whole directory
    - name: prepare and upload
      run: |
        cd avdl_${{ matrix.build_type }} && zip ../avdl_${{ github.ref_name }}_${{ matrix.build_type }}.zip * -r && cd ..
    # upload to release
    - name: Upload to release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release upload "$tag" avdl_${{ github.ref_name }}_${{ matrix.build_type }}.zip

  # test rue builds
  rue_builds:
    if: ${{ always() && !cancelled() && github.ref_name == 'develop' }}
    uses: ./.github/workflows/.compile_avdl_project.yml
    needs: [build_linux, build_windows]
    with:
        project_name: rue
        github_project: tomtsagk/rue
        github_branch: develop
        avdl_linux_artifact: avdl_linux
        avdl_windows_artifact: avdl_windows
        build_android: true
        build_android_googleplay: false
        build_ads: false
        build_steam: true
        build_linux: true
        build_windows: true
        build_quest2: true
        build_quest2_oculus: false
        include_signed: false
    secrets:
        OCULUS_API_LINK: ${{ secrets.OCULUS_API_LINK }}
        BASE64_PFX: ${{ secrets.BASE64_PFX }}
        PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
