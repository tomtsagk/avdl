name: Create Build

on:
  push:
    branches:
      - develop
      - master
    tags:
      "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - develop
      - master

env:
  # SDL2
  SDL_VERSION_LINUX: 2.0.20
  SDL_VERSION_LINUX_LINKER_NAME: libSDL2.so
  SDL_VERSION_LINUX_SONAME: libSDL2-2.0.so.0
  SDL_VERSION_LINUX_REAL_NAME: libSDL2-2.0.so.0.18.2
  SDL_VERSION_WINDOWS: 2.0.22
  # SDL2_mixer
  SDL_MIXER_VERSION_LINUX: 2.0.4
  SDL_MIXER_VERSION_LINUX_LINKER_NAME: libSDL2_mixer.so
  SDL_MIXER_VERSION_LINUX_SONAME: libSDL2_mixer-2.0.so.0
  SDL_MIXER_VERSION_LINUX_REAL_NAME: libSDL2_mixer-2.0.so.0.2.2
  SDL_MIXER_VERSION_WINDOWS: 2.6.0
  # GLEW
  GLEW_VERSION_LINUX: 2.2.0
  GLEW_VERSION_LINUX_LINKER_NAME: libGLEW.so
  GLEW_VERSION_LINUX_SONAME: libGLEW.so.2.2
  GLEW_VERSION_LINUX_REAL_NAME: libGLEW.so.2.2.0
  GLEW_VERSION_WINDOWS: 2.2.0
  # ogg
  OGG_VERSION_LINUX: 1.3.5
  OGG_VERSION_LINUX_LINKER_NAME: libogg.so
  OGG_VERSION_LINUX_SONAME: libogg.so.0
  OGG_VERSION_LINUX_REAL_NAME: libogg.so.0.8.5
  OGG_VERSION_WINDOWS: X
  # vorbis
  VORBIS_VERSION_LINUX: 1.3.7
  VORBIS_VERSION_LINUX_LINKER_NAME: libvorbis.so
  VORBIS_VERSION_LINUX_SONAME: libvorbis.so.0
  VORBIS_VERSION_LINUX_REAL_NAME: libvorbis.so.0.4.9
  VORBIS_VERSION_WINDOWS: X
  # png
  PNG_VERSION_LINUX: 1.6.39
  PNG_VERSION_LINUX_LINKER_NAME: libpng16.so
  PNG_VERSION_LINUX_SONAME: libpng16.so.16
  PNG_VERSION_LINUX_REAL_NAME: libpng16.so.16.39.0
  PNG_VERSION_WINDOWS: X
  # zlib
  ZLIB_VERSION_WINDOWS: 1.2.13
  # freetype
  FREETYPE_VERSION_LINUX: VER-2-13-1
  FREETYPE_VERSION_LINUX_LINKER_NAME: libfreetype.so
  FREETYPE_VERSION_LINUX_SONAME: libfreetype.so.6
  FREETYPE_VERSION_LINUX_REAL_NAME: libfreetype.so.6.20.0

jobs:
  dependencies_linux:
    runs-on: ubuntu-20.04
    steps:
    - name: cache
      id: cache
      uses: actions/cache@v3
      with:
        key: avdl_dependencies_linux_v10
        path: avdl_dependencies_linux
    - name: update packages
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
         sudo apt update && sudo apt install -y gcc pkg-config ca-certificates
         # sdl and sdl_mixer deps
         sudo apt install -y build-essential  git  make  cmake  autoconf  automake  libtool  pkg-config  libasound2-dev  libpulse-dev  libaudio-dev  libjack-dev  libx11-dev  libxext-dev  libxrandr-dev  libxcursor-dev  libxfixes-dev  libxi-dev  libxss-dev  libgl1-mesa-dev  libdbus-1-dev  libudev-dev  libgles2-mesa-dev  libegl1-mesa-dev  libibus-1.0-dev  fcitx-libs-dev  libsamplerate0-dev  libsndio-dev  libwayland-dev  libxkbcommon-dev  libdrm-dev  libgbm-dev libssl-dev
         # glew dependencies
         sudo apt install -y build-essential libxmu-dev libxi-dev libgl-dev
    - name: prepare directories
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        mkdir avdl_dependencies_linux
        mkdir avdl_dependencies_linux/linux
        mkdir avdl_dependencies_linux/linux/lib
        mkdir avdl_dependencies_linux/linux/include
        mkdir avdl_dependencies_linux/windows
        mkdir avdl_dependencies_linux/windows/lib
        mkdir avdl_dependencies_linux/windows/include
    - name: freetype - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://gitlab.freedesktop.org/freetype/freetype freetype
        cd freetype
        git checkout ${FREETYPE_VERSION_LINUX}
        sh autogen.sh
        ./configure --prefix=${HOME}/AVDL_DEPENDENCIES/freetype
        make -j6
        make -j6 install
        ./configure
        make -j6
        sudo make -j6 install
        cd ..
        cp ${HOME}/AVDL_DEPENDENCIES/freetype/lib/${FREETYPE_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${FREETYPE_VERSION_LINUX_SONAME}
    - name: libpng - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone git://git.code.sf.net/p/libpng/code libpng
        cd libpng
        git checkout v${PNG_VERSION_LINUX}
        ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
        make -j6
        make -j6 install
        ./configure
        make -j6
        sudo make -j6 install
        cd ..
        cp ${HOME}/AVDL_DEPENDENCIES/lib/${PNG_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${PNG_VERSION_LINUX_SONAME}
    - name: ogg - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://gitlab.xiph.org/xiph/ogg.git ogg
        cd ogg
        git checkout v${OGG_VERSION_LINUX}
        ./autogen.sh
        ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
        make -j6
        make -j6 install
        ./autogen.sh
        ./configure
        make -j6
        sudo make -j6 install
        cd ..
        cp ${HOME}/AVDL_DEPENDENCIES/lib/${OGG_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${OGG_VERSION_LINUX_SONAME}
    - name: vorbis - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://gitlab.xiph.org/xiph/vorbis.git vorbis
        cd vorbis
        git checkout v${VORBIS_VERSION_LINUX}
        ./autogen.sh
        ./configure --prefix=${HOME}/AVDL_DEPENDENCIES
        make
        make install
        cd ..
        cp ${HOME}/AVDL_DEPENDENCIES/lib/${VORBIS_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${VORBIS_VERSION_LINUX_SONAME}
    - name: vorbis2 - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://gitlab.xiph.org/xiph/vorbis.git vorbis2
        cd vorbis2
        git checkout v${VORBIS_VERSION_LINUX}
        ./autogen.sh
        ./configure
        make
        sudo make install
        cd ..
    - name: sdl - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        export C_INCLUDE_PATH=${HOME}/AVDL_DEPENDENCIES/include
        export LIBRARY_PATH=${HOME}/AVDL_DEPENDENCIES/lib:${HOME}/AVDL_DEPENDENCIES/lib64
        git clone https://github.com/libsdl-org/SDL SDL
        cd SDL
        git checkout release-$SDL_VERSION_LINUX
        mkdir build
        cd build
        ../configure --prefix=${HOME}/AVDL_DEPENDENCIES
        make -j6
        make -j6 install
        cd ../..
        cp ${HOME}/AVDL_DEPENDENCIES/lib/${SDL_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${SDL_VERSION_LINUX_SONAME}
    - name: sdl_mixer - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://github.com/libsdl-org/SDL_mixer SDL_mixer
        cd SDL_mixer
        git checkout release-$SDL_MIXER_VERSION_LINUX
        mkdir build
        cd build
        ../configure --prefix=${HOME}/AVDL_DEPENDENCIES --enable-music-ogg-vorbis
        make -j6
        make -j6 install
        cd ../..
        cp ${HOME}/AVDL_DEPENDENCIES/lib/${SDL_MIXER_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${SDL_MIXER_VERSION_LINUX_SONAME}
    - name: glew - linux
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://github.com/nigels-com/glew glew
        cd glew
        git checkout glew-${GLEW_VERSION_LINUX}
        cd auto
        make
        cd ..
        make GLEW_DEST=${HOME}/AVDL_DEPENDENCIES
        make GLEW_DEST=${HOME}/AVDL_DEPENDENCIES install
        cd ..
        cp ${HOME}/AVDL_DEPENDENCIES/lib64/${GLEW_VERSION_LINUX_REAL_NAME} avdl_dependencies_linux/linux/lib/${GLEW_VERSION_LINUX_SONAME}
    - name: steamworks
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      env:
        steamworks_api_link: ${{ secrets.STEAMWORKS_API_LINK }}
      run: |
        wget ${steamworks_api_link} --quiet
        unzip steamworks_sdk.zip
        mv sdk/redistributable_bin/linux64/libsteam_api.so avdl_dependencies_linux/linux/lib
        mv sdk/redistributable_bin/steam_api.dll avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/steam_api.lib avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/win64/steam_api64.dll avdl_dependencies_linux/windows/lib
        mv sdk/redistributable_bin/win64/steam_api64.lib avdl_dependencies_linux/windows/lib
        cp sdk/public/steam/*.h avdl_dependencies_linux/linux/include
        cp sdk/public/steam/*.h avdl_dependencies_linux/windows/include
    - name: collect_dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        cp -d -r ${HOME}/AVDL_DEPENDENCIES/include/* avdl_dependencies_linux/linux/include
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: avdl_dependencies_linux
  dependencies_windows:
    runs-on: windows-latest
    steps:
    - name: cache
      id: cache
      uses: actions/cache@v3
      with:
        key: avdl_dependencies_windows_v10
        path: avdl_dependencies_windows
    - name: get_dependencies
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        C:\msys64\usr\bin\wget.exe -q http://www.zlib.net/zlib-$env:ZLIB_VERSION_WINDOWS.tar.gz
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-$env:SDL_VERSION_WINDOWS/SDL2-devel-$env:SDL_VERSION_WINDOWS-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-$env:SDL_MIXER_VERSION_WINDOWS/SDL2_mixer-devel-$env:SDL_MIXER_VERSION_WINDOWS-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-$env:GLEW_VERSION_WINDOWS/glew-$env:GLEW_VERSION_WINDOWS-win32.zip
        mkdir "C:/Program Files/avdl_sdl2"
        mkdir "C:/Program Files/avdl_sdl2_mixer"
        mkdir "C:/Program Files/avdl_glew"
        mv SDL2-devel-$env:SDL_VERSION_WINDOWS-VC.zip "C:/Program Files/avdl_sdl2"
        mv SDL2_mixer-devel-$env:SDL_MIXER_VERSION_WINDOWS-VC.zip "C:/Program Files/avdl_sdl2_mixer"
        mv glew-$env:GLEW_VERSION_WINDOWS-win32.zip "C:/Program Files/avdl_glew"
    # zlib
    - name: zlib
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        tar xf zlib-${ZLIB_VERSION_WINDOWS}.tar.gz
        cd zlib-${ZLIB_VERSION_WINDOWS}
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="C:/Program Files/zlib"
        cmake --build . --config Release
        cmake --install .
        cd ../../
    # libpng
    - name: libpng
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        git clone git://git.code.sf.net/p/libpng/code libpng
        cd libpng
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="C:/Program Files/libpng"
        cmake --build . --config Release
        cmake --install .
        cd ../../
    # freetype
    - name: freetype
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://gitlab.freedesktop.org/freetype/freetype freetype
        cd freetype
        git checkout ${FREETYPE_VERSION_LINUX}
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="C:/Program Files/freetype" -DBUILD_SHARED_LIBS=true -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release
        cmake --install .
        cd ../../
        ls -R "C:/Program Files/freetype"
    # sdl
    - name: sdl - windows
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        cd "C:/Program Files/avdl_sdl2"
        unzip SDL2-devel-$env:SDL_VERSION_WINDOWS-VC.zip
        cd
    # sdl_mixer
    - name: sdl_mixer - windows
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        cd "C:/Program Files/avdl_sdl2_mixer"
        unzip SDL2_mixer-devel-$env:SDL_MIXER_VERSION_WINDOWS-VC.zip
        cd
    # glew
    - name: glew - windows
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      run: |
        cd "C:/Program Files/avdl_glew"
        unzip glew-$env:GLEW_VERSION_WINDOWS-win32.zip
        cd
    - name: package
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        mkdir avdl_dependencies_windows
        mkdir avdl_dependencies_windows/windows
        mkdir avdl_dependencies_windows/windows/include
        mkdir avdl_dependencies_windows/windows/lib
        cp -r "C:/Program Files/zlib" avdl_dependencies_windows/windows
        cp -r "C:/Program Files/libpng" avdl_dependencies_windows/windows
        cp -r "C:/Program Files/freetype" avdl_dependencies_windows/windows
        cp -r "C:/Program Files/avdl_sdl2/SDL2-${SDL_VERSION_WINDOWS}/include/"* avdl_dependencies_windows/windows/include
        cp -r "C:/Program Files/avdl_sdl2/SDL2-${SDL_VERSION_WINDOWS}/lib/"* avdl_dependencies_windows/windows/lib
        cp -r "C:/Program Files/avdl_sdl2_mixer/SDL2_mixer-${SDL_MIXER_VERSION_WINDOWS}/include/"* avdl_dependencies_windows/windows/include
        cp -r "C:/Program Files/avdl_sdl2_mixer/SDL2_mixer-${SDL_MIXER_VERSION_WINDOWS}/lib/"* avdl_dependencies_windows/windows/lib
        cp -r "C:/Program Files/avdl_glew/glew-${GLEW_VERSION_WINDOWS}/include/"* avdl_dependencies_windows/windows/include
        cp -r "C:/Program Files/avdl_glew/glew-${GLEW_VERSION_WINDOWS}/lib/"* avdl_dependencies_windows/windows/lib
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: avdl_dependencies_windows
  build_linux:
    runs-on: ubuntu-20.04
    needs: [dependencies_windows, dependencies_linux]
    steps:
    - name: update packages
      run: |
         sudo apt update && sudo apt install -y gcc pkg-config libgl1-mesa-dev unzip
    - name: init_avdl
      uses: actions/checkout@v1
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: AVDL_BUILD/dependencies
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: AVDL_BUILD/dependencies
    - name: build & package avdl
      run: |
        make -j6 prefix=AVDL_BUILD/ CC=gcc
        make -j6 prefix=AVDL_BUILD/ CC=gcc install
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_linux
        path: AVDL_BUILD
  build_windows:
    runs-on: windows-latest
    needs: [dependencies_windows, dependencies_linux]
    steps:
    - name: init_avdl
      uses: actions/checkout@v1
    - name: compile
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="AVDL_BUILD"
        cmake --build . --config Release
        cmake --install .
        cd ..
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_linux
        path: build/AVDL_BUILD/dependencies
    - uses: actions/download-artifact@v3
      with:
        name: avdl_dependencies_windows
        path: build/AVDL_BUILD/dependencies
    - uses: actions/upload-artifact@v3
      with:
        name: avdl_windows
        path: build/AVDL_BUILD

  # Windows d3d11
  rue_build_windows_d3d11:
    runs-on: windows-latest
    if: ${{ false }}
    needs: [build_windows]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: avdl_windows
        path: avdl_windows
    - name: get_rue
      shell: bash
      run: |
        git clone https://github.com/tomtsagk/rue rue
        cd rue
        git checkout develop
        cd ..
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: unpack_avdl
      shell: bash
      run: |
        mkdir AVDL_BUILD
        mv avdl_windows/* AVDL_BUILD
        rmdir avdl_windows
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_rue
      shell: bash
      if: ${{ false }}
      run: |
        cd rue
        mv ../libraries .
        mkdir cengine
        cp -r ../AVDL_BUILD/share/avdl/cengine/*.c ../AVDL_BUILD/share/avdl/cengine/*.cpp ../AVDL_BUILD/include/*.h cengine
        mkdir build
        ../AVDL_BUILD/bin/avdl.exe -t
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="RUE_BUILD" -DAVDL_DIRECT3D11=1
        cmake --build . --config Release
        cmake --install .
        cpack
        cd ..
    - name: compile_rue
      shell: bash
      run: |
        cd rue
        mv ../libraries .
        mkdir cengine
        cp -r ../AVDL_BUILD/share/avdl/cengine/*.c ../AVDL_BUILD/share/avdl/cengine/*.cpp ../AVDL_BUILD/include/*.h cengine
        mkdir build
        ../AVDL_BUILD/bin/avdl.exe -t
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
    - name: upload_artifact_vs
      uses: actions/upload-artifact@v3
      with:
        name: rue_vs_windows
        path: rue/
    - name: compile_rue2
      shell: bash
      run: |
        cd rue
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="RUE_BUILD" -DAVDL_DIRECT3D11=1
        cmake --build . --config Release
        cmake --install .
        cpack
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      if: ${{ false }}
      with:
        name: rue_build_windows_d3d11
        path: rue/build/RUE_BUILD
    - name: upload_artifact_installer
      if: ${{ false }}
      uses: actions/upload-artifact@v3
      with:
        name: rue_installer_windows_d3d11
        path: rue/build/rue-1.0.1-win64.exe
  # Windows d3d11 steam
  rue_build_windows_steam_d3d11:
    runs-on: windows-latest
    if: ${{ false }}
    needs: [build_windows]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: avdl_windows
        path: avdl_windows
    - name: get_rue
      shell: bash
      run: |
        git clone https://github.com/tomtsagk/rue rue
        cd rue
        git checkout develop
        cd ..
    - name: prepare_libraries
      shell: bash
      run: |
        mkdir libraries
    - name: unpack_avdl
      shell: bash
      run: |
        mkdir AVDL_BUILD
        mv avdl_windows/* AVDL_BUILD
        rmdir avdl_windows
        cp -r AVDL_BUILD/dependencies/windows/libpng ./libaries/
        cp -r AVDL_BUILD/dependencies/windows/zlib ./libaries/
    - name: zlib
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/zlib "C:/Program Files (x86)/zlib"
    - name: libpng
      shell: bash
      run: |
        cp -r AVDL_BUILD/dependencies/windows/libpng "C:/Program Files (x86)/libpng"
    - name: get_libraries
      run: |
        C:\msys64\usr\bin\wget.exe -q https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL/releases/download/release-2.0.22/SDL2-devel-2.0.22-VC.zip
        C:\msys64\usr\bin\wget.exe -q https://github.com/libsdl-org/SDL_mixer/releases/download/release-2.6.0/SDL2_mixer-devel-2.6.0-VC.zip
    - name: glew
      shell: bash
      run: |
        mv glew-2.2.0-win32.zip libraries
        cd libraries
        unzip glew-2.2.0-win32.zip
        cd ..
    - name: sdl
      shell: bash
      run: |
        mv SDL2-devel-2.0.22-VC.zip libraries
        cd libraries
        unzip SDL2-devel-2.0.22-VC.zip
        cd ..
    - name: sdl_mixer
      shell: bash
      run: |
        mv SDL2_mixer-devel-2.6.0-VC.zip libraries
        cd libraries
        unzip SDL2_mixer-devel-2.6.0-VC.zip
        cd ..
    - name: compile_rue
      shell: bash
      run: |
        mv AVDL_BUILD rue
        cd rue
        mv ../libraries .
        mkdir cengine
        cp -r ./AVDL_BUILD/share/avdl/cengine/*.c ./AVDL_BUILD/share/avdl/cengine/*.cpp ./AVDL_BUILD/include/*.h cengine
        mkdir build
        ./AVDL_BUILD/bin/avdl.exe -t
        cp .avdl_cache/*.c src/
        for i in src/*.c; do mv $i ${i/.dd.c/.c}; done
        cd build
        cmake ../ . -DCMAKE_INSTALL_PREFIX="RUE_BUILD" -DAVDL_STEAM=1 -DAVDL_DIRECT3D11=1
        cmake --build . --config Release
        cmake --install .
        cd ..
    - name: upload_artifact
      uses: actions/upload-artifact@v3
      with:
        name: rue_build_windows_steam_d3d11
        path: rue/build/RUE_BUILD

  # Github release
  release_github:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: [build_linux, build_windows]
    runs-on: ubuntu-20.04
    steps:
    - name: init_project
      uses: actions/checkout@v3
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release create "$tag" -F metadata/changelog.md --title="${GITHUB_REPOSITORY#*/} - ${tag}"

  release_github_assets:
    if: ${{ always() && !cancelled() && github.ref_type == 'tag' }}
    needs: release_github
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type: [linux, windows]
    steps:
    # possibly needs this ?
    - name: init_project
      uses: actions/checkout@v3
    # get build
    - uses: actions/download-artifact@v3
      with:
        name: avdl_${{ matrix.build_type }}
        path: avdl_${{ matrix.build_type }}
    # prepare for publishing
    - name: prepare zipping
      run: sudo apt update && sudo apt install -y zip
    # publish whole directory
    - name: prepare and upload
      run: |
        cd avdl_${{ matrix.build_type }} && zip ../avdl_${{ github.ref_name }}_${{ matrix.build_type }}.zip * -r && cd ..
    # upload to release
    - name: Upload to release
      env:
        GITHUB_TOKEN: ${{ github.token }}
        tag: ${{ github.ref_name }}
      run: |
        gh release upload "$tag" avdl_${{ github.ref_name }}_${{ matrix.build_type }}.zip

  # test rue builds
  rue_builds:
    if: ${{ always() && !cancelled() && ${{ github.ref_name == "develop" }}
    uses: ./.github/workflows/.compile_avdl_project.yml
    needs: [build_linux, build_windows]
    with:
        project_name: rue
        github_project: tomtsagk/rue
        github_branch: develop
        avdl_linux_artifact: avdl_linux
        avdl_windows_artifact: avdl_windows
        build_android: true
        build_android_googleplay: false
        build_ads: false
        build_steam: false
        build_linux: true
        build_windows: true
        build_quest2: true
        build_quest2_oculus: false
        include_signed: false
    secrets:
        OCULUS_API_LINK: ${{ secrets.OCULUS_API_LINK }}
